Laravel Commands:
laravel new <name> —> create a new project
php artisan serve —> run project
php artisan migrate —> migrate tables info
php artisan migrate:refresh —> reset and re-run all migrations
php artisan make:model <Name> —> make a new model
php artisan tinker —> boot up laravel’s shell; (ctrl-c) and re-run it up so it works with recent changes
	App\Task::all() —> fetch all tasks
	(cmd-k) —> clear screen
	App\Task::where('id', '>', 2)->get();
	App\Task::pluck('body'); —> pluck body from every record
	App\Task::first(); —> get first record; can also call a function within Task class
	App\Task::where('completed', 0)->get();
php artisan migrate:reset
php artisan make:model <Name> -m —> create a model and migration for that model
php artisan make:model <Name> -c —> create a model and controller for that model
composer dump-autoload —> refresh; dump all autoload files
php artisan make:controller <NameController>
php artisan make:migration create_posts_table —create=posts —> posts is the name of the table
php artisan make:model Post -mc —> create a model named Post with a migration and a controller
php artisan make:controller TasksController -r —> resource full controller
php artisan make:provider NameServiceProvider —> make service provider called NameServiceProvider
php artisan make:mail WelcomeAgain --markdown="emails.welcome-again"
php artisan vendor:publish --tag=laravel-mail
php artisan make:request NameRequest

npm run development —> add css code to resources/assets/sass/app.scss then enter command to add them to public/css/app.css; same for js files
npm run watch —> register a watcher to detect changes; must run every time

____________________________________________________________
valet park —> add path to valet
valet forget —> remove path from valet
valet path —> view valet paths

____________________________________________________________
MySql Commands:
show databases; —> show dbs
mysql -u <username> -p —> login to db
create database <name>; —> create new database
use <name>; —> to use db
show tables; —> view tables

____________________________________________________________
Non-command notes
- axios - Ajax library
- any laravel form must have a csrf_field() in the view on first line:
<form>
{{ csrf_field() }}
...
</form>
- When creating user passwords, use bcrypt(‘password’), which generates a unique secure token

____________________________________________________________
Laravel API and json codes:

Route::get();
Route::put(); // replace old resource with new content; uses ajax calls
Route::patch(); // update a part of your resource; uses ajax calls
Route::delete(); // uses ajax?

/* In controller:
request is submitted through a form for example
id is given in the url
public function putQuote(Request $request, $id){
	;
}
*/

return response()->json(['return object' => $return_object], 201);
200 means ok
201 code means everythign was successful
202 accepted
204 no content
403 forbidden
404 not found
409 conflict
____________________________________________________________
Angular CLI
ng g c quote —> ng generate component called quote; creates ts, html, css, spec.ts files; remove spec files after

____________________________________________________________
Angular notes
quote.service.ts file:
// injectable allows injection
// rxjs/Rx allows map()
// response —> get a response
// convert response to json
// get object laravel sent through a response

import {Injectable} from “@angular/core”;
import {Http} from “@angular/http”;

@Injectable()
export class QuoteService {
  constructor(private http: Http){
  
  }
  getQuotes(){
    return this.http.get(‘localhost://…/where_to_get_quotes_from’).map(
      (response: Response) => {
        return response.json().quotes;
      }
    );
  }
}
